<?php
/**
 * @file
 * commerce_waitlist.module
 */

require_once 'commerce_waitlist.features.inc';

/**
 * Implements hook_form_alter().
 *
 * Adding the "Add to waitlist" link to the "Add to cart" form if the product is
 * out of stock.
 */
function commerce_waitlist_form_alter(&$form, &$form_state, $form_id) {
  // Ignore the form unless its ID starts with "commerce_cart_add_to_cart_form".
  if (substr($form_id, 0, 30) != 'commerce_cart_add_to_cart_form') {
    return;
  }

  // Get the product entity.
  if (empty($form['product_id']['#value'])) {
    return;
  }
  $product_id = $form['product_id']['#value'];
  $wrapper = entity_metadata_wrapper('commerce_product', $product_id);

  // Return if there's no stock field on the product.
  if (empty($wrapper->commerce_stock)) {
    return;
  }

  // If the product is out of stock, disable the "Add to cart" button and add
  // an "Add to waitlist" link.
  if ($wrapper->commerce_stock->value() == 0) {
    $form['submit']['#disabled'] = TRUE;

    // Add the waitlist link unless the form is shown on the waitlist page,
    // where the link will be added by the view, outside the form.
    // @TODO Add a configuration for selecting on which pages the link is shown.
    $item = menu_get_item();
    if ($item['path'] == 'user/%/waitlist') {
      return;
    }

    $form['waitlist'] = array(
      '#markup' => flag_create_link('waitlist', $product_id),
    );
  }
}

/**
 * Implements hook_entity_update().
 *
 * Whenever a product gets updated, check if it just came back to stock. If so,
 * notify users who flagged it.
 */
function commerce_waitlist_entity_update($entity, $type) {
  if ($type != 'commerce_product') {
    return;
  }

  // Make sure the stock field is present on the entity.
  if (empty($entity->commerce_stock) ||empty($entity->original->commerce_stock)) {
    return;
  }

  // Check if the product just became available again; I.e. If the original
  // stock is zero and the updated stock is greater than zero.
  if ($entity->original->commerce_stock[LANGUAGE_NONE][0]['value'] == 0 && $entity->commerce_stock[LANGUAGE_NONE][0]['value'] > 0) {
    // Search for a flagging made by the by the current user for which no
    // notification was sent yet.
    $flagging_id = commerce_waitlist_get_flagging_id($entity->product_id);
    if (!$flagging_id) {
      return;
    }

    // Send a notification to the user.
    commerce_waitlist_send_notification($entity->product_id, $flagging_id);
  }
}

/**
 * Get the unnotified waitlist flagging of the user on a given product.
 *
 * @param int $product_id
 *   Commerce product ID.
 *
 * @return int
 *   The waitlist flagging ID of the product by the current user.
 */
function commerce_waitlist_get_flagging_id($product_id) {
  global $user;

  $flag = flag_get_flag('waitlist');

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'flagging')
    ->propertyCondition('fid', $flag->fid)
    ->propertyCondition('entity_type', 'commerce_product')
    ->propertyCondition('entity_id', $product_id)
    ->propertyCondition('uid', $user->uid)
    // Filter out flaggings for which the user was already notified.
    ->fieldCondition('field_waitlist_notified', 'value', FALSE)
    ->range(0, 1)
    ->execute();

  if (!empty($result['flagging'])) {
    return key($result['flagging']);
  }
}

/**
 * Send a notification about a product which came back to stock.
 *
 * @param int $product_id
 *   The product which became available.
 * @param int $flagging_id
 *   The waitlist flag that was issued on the product.
 */
function commerce_waitlist_send_notification($product_id, $flagging_id) {
  // Send the notification.
  $message = message_create('product_available');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_product_ref->set($product_id);
  message_notify_send_message($message);

  // Mark the flagging as notified.
  // @TODO Replace the follwing with $wrapper->save(); Currently the flagging
  // entity doesn't support save functionality, in the meantime update the
  // notified field manually.
  db_update('field_data_field_waitlist_notified')
    ->fields(array('field_waitlist_notified_value' => TRUE))
    ->condition('entity_type', 'flagging')
    ->condition('bundle', 'waitlist')
    ->condition('entity_id', $flagging_id)
    ->execute();
}
