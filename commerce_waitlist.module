<?php
/**
 * @file
 * commerce_waitlist.module
 */

require_once 'commerce_waitlist.features.inc';

/**
 * Implements hook_form_alter().
 */
function commerce_waitlist_form_alter(&$form, &$form_state, $form_id) {
  // Only act on the add-to-cart form, starts with commerce_cart_add_...
  if (substr($form_id, 0, 30) != 'commerce_cart_add_to_cart_form') {
    return;
  }

  // @TODO Is that a safe way for retrieving the product ID?
  if (empty($form['product_id']['#value'])) {
    return;
  }
  $product_id = $form['product_id']['#value'];
  $wrapper = entity_metadata_wrapper('commerce_product', $product_id);

  // Nothing to do if there's no stock field on the product.
  if (empty($wrapper->commerce_stock)) {
    return;
  }

  // If the product is out of stock, disable the "Add to cart" button and add
  // an "Add to waitlist" link.
  if ($wrapper->commerce_stock->value() == 0) {
    $form['submit']['#disabled'] = TRUE;

    $form['waitlist'] = array(
      '#markup' => flag_create_link('waitlist', $product_id),
    );
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_waitlist_entity_update($entity, $type) {
  global $user;

  if ($type != 'commerce_product') {
    return;
  }

  // Check if the product just became available again; If the original stock is
  // zero and the updated stock is greater than zero.
  if ($entity->original->commerce_stock[LANGUAGE_NONE][0]['value'] == 0 && $entity->commerce_stock[LANGUAGE_NONE][0]['value'] > 0) {
    $flagging_id = commerce_waitlist_get_flagging_id($entity->product_id);
    if (!$flagging_id) {
      return;
    }

    // Send notification.
    $message = message_create('product_available');
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_product_ref->set($entity);

    // Let message-notify deliver the email, and send the message for us.
    // We pass in the options the field names, that will be used to capture
    // the rendered message, and provide an email log.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
    message_notify_send_message($message, $options);

    // Mark the flagging as notified.
    $wrapper = entity_metadata_wrapper('flagging', $flagging_id);
    $wrapper->field_waitlist_notified->set(TRUE);
    $wrapper->save();
  }
}

/**
 * Get the unnotified waitlist flagging of the user on a given product.
 *
 * @param int $product_id
 *   Commerce product ID.
 *
 * @return int
 *   The waitlist flagging ID of the product by the current user.
 */
function commerce_waitlist_get_flagging_id($product_id) {
  global $user;

  $flag = flag_get_flag('waitlist');

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'flagging')
    ->propertyCondition('fid', $flag->fid)
    ->propertyCondition('entity_type', 'commerce_product')
    ->propertyCondition('entity_id', $product_id)
    ->propertyCondition('uid', $user->uid)
    // Filter out flaggings for which the user was already notified.
    ->fieldCondition('field_waitlist_notified', 'value', FALSE)
    ->range(0, 1)
    ->execute();

  if (!empty($result['flagging'])) {
    return key($result['flagging']);
  }
}
